generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  // Planetscale does not support foreign keys, so we will leverage indexes and Prisma relations
  relationMode = "prisma"
}

model User {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  email         String         @unique
  firstName     String         @db.Text
  workouts      Workout[]
  sets          Set[]
  exercises     Exercise[]
  sessions      Session[]
  connections   Connection[]
  roles         Role[]
  organizations Organization[]
}

model Organization {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  name          String @db.Text
  organizations User[] // implicit many-to-many
}

model Role {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  name        String       @db.Text
  users       User[]
  permissions Permission[]
}

model Permission {
  id String @id @db.VarChar(12)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  action      String // e.g. create, read, update, delete
  entity      String // e.g. workout, org, user, etc.
  access      String // e.g. own or any
  description String @default("")
  roles       Role[]

  @@unique([action, entity, access])
}

model Connection {
  id String @id @db.VarChar(12)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providerName String
  providerId   String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String

  @@unique([providerName, providerId])
  @@unique([providerId, userId])
}

model Session {
  id String @id @db.VarChar(12)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.VarChar(12)
  expiresAt DateTime

  @@index([userId])
}

model Exercise {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  name   String @db.Text
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  sets   Set[]

  @@index([userId])
  @@fulltext([name])
}

model Workout {
  id String @id @db.VarChar(12)

  archivedAt  DateTime?
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  name      String   @db.Text
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(12)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sets      Set[]

  @@index([userId])
}

model AmountUnit {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  sets       Set[]

  name      String @db.Text
  delimiter String @unique

  @@map("WorkoutSetAmountUnit")
}

model Set {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  amount     Int?
  exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Restrict)
  exerciseId String     @db.VarChar(12)
  unit       AmountUnit @relation(fields: [unitId], references: [id])
  unitId     String
  volume     Int
  workout    Workout    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  String     @db.VarChar(12)
  tags       SetTag[]
  groups     SetGroup[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @db.VarChar(12)

  @@index([exerciseId])
  @@index([unitId])
  @@index([userId])
  @@index([workoutId])
  @@map("WorkoutSet")
}

model SetTag {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  name String @db.Text
  sets Set[]

  @@map("WorkoutSetTag")
}

model SetGroup {
  id String @id @db.VarChar(12)

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  name String @db.Text
  sets Set[]

  @@map("WorkoutSetGroup")
}

model Waitlist {
  id String @id @db.VarChar(12)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String @unique
  firstName String @db.Text
}
